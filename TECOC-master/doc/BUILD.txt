
TECOC build & setup instructions

Please note my use of "teco" and "tecoc".  "teco" refers to the editor
in general, and "tecoc" refers to the particular "tecoc"
implementation of teco.

TECOC has been tested on 64 bit Linux, 64 bit Mac, and 64 bit Windows
OSs that were current as of 2015.  In the past, this system was build on
32 and even 16 bit machines, so I have every reason to believe that it
would build as-is on 32 bit environments.

I used GCC on Linux and Mac, and I used the Microsoft 2013 C compiler
on Windows.  On the Mac, GCC came automatically when I installed the
Apple development kit.  I did no special setup.

The Linux and Mac versions support video and non-video modes.  The
Windows version only supports non-video mode.  (Porting Windows to
video using ncurses would probably be pretty simple.)  As-shipped, the
Linux and Mac versions are setup to build the video versions.  This
can be controlled by editing their associated makefiles.  Linux and
Mac machine would need to install the ncurses development library.

To build, go to the "src" directory and type:

Linux:  make -f makefile.linux

Mac:  make -f makefile.osx

Windows:  nmake -f makefile.win

You will end up with an executable names "tecoc".  That is all you
need from this directory.

Historically, the teco environment included a handful of utilities
including:

	teco
	munge
	inspect
	Make

Tecoc includes all of this functionality in the single tecoc
executable.  Tecoc has two ways of determining which functionality you
desire as follows:

1.  On file systems that have links, one can create an entry with one
of the above names that links to the tecoc executable.

2.  Alternatively (especially on Windows), if you execute the tecoc
executable directly, then the first argument must be one of the
utility names above.  "teco" is what you'd mainly use.

As mentioned, teco supports the ability to create your own macros.
User added macros would exist in files named XX.tec
where XX is the name of the macro.  It need not be two characters long.
These macro files must exist somewhere tecoc can find them.  To this end,
tecoc supports an environment variable named TEC_LIBRARY
You should set that environment variable to the directory (full path)
where the macros are to exist.  Note that TEC_LIBRARY must contain a
trailing slash.

When teco starts up, it is capable of running a start-up file to set
initial preferences.  The file must be specified by the TEC_INIT
environment variable.  The value of that variable must start with a
dollar sign ($) followed by the complete path to the start-up file.
For example, on a Unix like system you could use:

	export TEC_INIT=\$/home/me/teco/teco.ini

Lastly, the "tec" file extension means "teco macro".  There is also a
file type "tes".  That stands for "teco macro source".  Generally, if you
have a small macro, you'd just put it in a .tec file.  Larger macros
would be written in a .tes file allowing comments and space.  Later
the squeeze function can be used to convert a .tes file into a .tec
file.
